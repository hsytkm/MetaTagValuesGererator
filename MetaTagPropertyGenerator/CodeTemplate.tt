<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable
using System;

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    partial class <#= ClassName #>
    {
<# foreach (var item in AttributeFieldSources) { #>
        // Created from <#= GetBackingFieldName(item) #>
        public <#= GetFieldTypeFullName(item) #> <#= GetPropertyName(item) #>
        {
            get
            {
                if (!<#= GetLoadedFlagName(item) #>)
                {
<# if (IsBuiltInType(item)) { #>
                    <#= GetBackingFieldName(item) #> = <#= GetMethodName(item) #>(<#= GetOptionKey(item) #>, <#= GetOptionId(item) #>);
<# } else { #>
                    var value = <#= GetMethodName(item) #>(<#= GetOptionKey(item) #>, <#= GetOptionId(item) #>);
                    if (!FastEnumUtility.FastEnum.IsDefined<<#= GetFieldTypeFullName(item) #>>(value))
                        throw new InvalidOperationException("Not defineded " + value.ToString() + "@<#= GetFieldTypeShortName(item) #>");

                    <#= GetBackingFieldName(item) #> = (<#= GetFieldTypeFullName(item) #>)value;
<# } #>
                    <#= GetLoadedFlagName(item) #> = true;
                }
                return <#= GetBackingFieldName(item) #>;
            }
        }
        private bool <#= GetLoadedFlagName(item) #>;

<# } #>
    }
}
